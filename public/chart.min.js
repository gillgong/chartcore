define('chart',['jquery'],function( $ ) {
	/**
	*Here is the chart base , any actual charts should extend on this chart.
	*The argument "chartBaseConf" as below :
	*	{
	*		'container' : xxx,
	*		'axis_x' : xxx,
	*		'axis_y' : xxx,
	*	}
	*
	*/
	var Chart = function( chartBaseConf ) {

		this.x_direction_Axis =[];
		this.y_direction_Axis = [];
		this.data = null;
		this.backGroup = null;
		this.mainGroup = null;
		this.faceGroup = null;
		this.$chartMainArea = null;
		this.$chartFaceArea = null;
		/**
		*this.mainArea as below:
		*	{
		*		'x' : xxx,
		*		'y' : xxx,
		*		'width' : xxx,
		*		'height' : xxx,
		*	}
		*/
		this.mainArea = {
			'x' : Number.MAX_VALUE,
			'y' : Number.MAX_VALUE,
			'width' : Number.MIN_VALUE,
			'height' : Number.MIN_VALUE
		};
		if( chartBaseConf ) {
			this.$container = $(chartBaseConf.container);
			this.x_direction_Axis = chartBaseConf.axis_x;
			this.y_direction_Axis = chartBaseConf.axis_y;
		}
		this._init();
	};
	
	Chart.prototype = {
	
		//Some constant as below///////////////////////////
		'XMLNS' : 'http://www.w3.org/2000/svg',
		'SVG_NS' : "http://www.w3.org/2000/svg",
		'RADIAN' : 0.017453293,
		///////////////////////////////////////////////////
		
		/**
		* Data format as below:
		*	{
		*		'axisGuide' : {
		*			'x' : 'aaa',
		*			'y' : 'bbb'
		*		},
		*		'data' : [
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			},
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			},
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			}
		*		]
		*	}
		*
		*
		*
		*/
		'setData' : function( data ) {
			
			this.data = data;
		},
		
		'processData' : function( data ) {
		
			return data;
		},
		
		'_init' : function() {
		
			var axis_x = this.x_direction_Axis[0],
				axis_y = this.y_direction_Axis[0];
			
			this.overrideMethodsForAxis( axis_x , axis_y );
		},
		
		/**
		*Here is the chart area :
		*<div class="chartMainArea">
		*	<svg>
		*		<g class="backGroup"></g>
		*		<g class="mainGroup"></g>
		*		<g class="faceGroup"></g>
		*	</svg>
		*</div>
		* <div class="chartFaceArea"></div>
		*/
		'_render' : function() {
		
			var mainArea = null,
				$chartMainArea = null,
				$chartFaceArea = null,
				backGroup = null,
				mainGroup = null,
				faceGroup = null,
				svgDom = null;
		
			this.drawAxis_x();
			this.drawAxis_y();
			mainArea = this.getChartMainInfo();
			$chartMainArea = $( '<div class="chartMainArea"></div>');	
			$chartFaceArea = $( '<div class="chartFaceArea"></div>');
			svgDom = this.createElement( 'svg' , {
				'version' : '1.1',
				'width' : '100%',
				'height' : '100%',
				'xmlns' : this.XMLNS
			} );
			
			backGroup = this.createElement( 'g' , {
				'class' : 'backGroup'
			} ,svgDom );
			mainGroup = this.createElement( 'g' , {
				'class' : 'mainGroup'
			} ,svgDom );
			faceGroup = this.createElement( 'g' , {
				'class' : 'faceGroup'
			} ,svgDom );
			$chartMainArea.css({
				'position' : 'absolute',
				'left' : mainArea.x,
				'top' : mainArea.y,
				'width' : mainArea.width,
				'height' : mainArea.height
			});
			$chartFaceArea.css({
				'position' : 'absolute',
				'left' : mainArea.x,
				'top' : mainArea.y,
				'width' : mainArea.width,
				'height' : mainArea.height
			});
			$chartMainArea.append( svgDom );
			this.$container.append( $chartMainArea );
			this.$container.append( $chartFaceArea );
			this.backGroup = backGroup;
			this.mainGroup = mainGroup;
			this.faceGroup = faceGroup;
			this.$chartMainArea = $chartMainArea;
			this.$chartFaceArea = $chartFaceArea;
			return this;
		},
		
		'createElement' : function( tagName , attrs , parentDom , isSvgDom ) {
			
			var dom = null,
				isSvgDom = (isSvgDom==null || isSvgDom ) ? true : false;
			
			if ( document.createElementNS && isSvgDom ) {
				dom = document.createElementNS(this.SVG_NS, tagName);
			} else {
				dom = document.createElement(tagName);
			}
			
			if( attrs != null ) {
				for( var ele in attrs ) {
					
					dom.setAttribute( ele , attrs[ele] );
				}
			}
			if( parentDom ) {
				parentDom.appendChild( dom );
			}
			return dom;
		},
		
		'getChartMainInfo' : function() {
			
			var axis_x = this._getAxis_x_info(),
				axis_y = this._getAxis_y_info();
			
			this.mainArea['x'] = axis_x['begX'];
			this.mainArea['width'] = axis_x['endX'] - axis_x['begX'];
			this.mainArea['y'] = axis_y['begY'];
			this.mainArea['height'] = axis_y['endY'] - axis_y['begY'];
			return this.mainArea;
		},
		
		'draw' : function() {
			
			this._render();
			///////implement by the user////////////////
			this.beforeDraw();
			////////////////////////////////////////////
			this.drawBack();
			this.drawMain();
			this.drawFace();
			//////implement by the user////////////////
			this.afterDraw();
			///////////////////////////////////////////

			return this;
		},
		
		'_getAxis_x_info' : function() {
			
			var len = this.x_direction_Axis.length,
				axis_x_info = this.mainArea,
				axisLineInfo = null,
				axisObj = null;
			
			for( var i=0 ; i<len ; i++ ) {
				axisObj = this.x_direction_Axis[i];
				axisLineInfo = axisObj.getAxisLineInfo();
				axis_x_info['begX'] = axisObj.leftDis + axisLineInfo['begX'];
				axis_x_info['endX'] = axis_x_info['begX'] + (axisLineInfo['endX']-axisLineInfo['begX']);
			}
			return axis_x_info;
		},
		
		'_getAxis_y_info' : function() {
		
			var len = this.y_direction_Axis.length,
				axis_y_info = this.mainArea,
				allInfo = null,
				axisObj = null;
			
			for( var i=0 ; i<len ; i++ ) {
				axisObj = this.y_direction_Axis[i];
				allInfo = axisObj.getAxisLineInfo();
				axis_y_info['begY']	= axisObj.topDis + allInfo['begY'];
				axis_y_info['endY']	= axis_y_info['begY'] + (allInfo['endY']-allInfo['begY']);
			}
			return axis_y_info;
		},
		
		'drawAxis_x' : function() {
		
			var len = this.x_direction_Axis.length;
			
			for( var i=0 ; i<len ; i++ ) {
				this.x_direction_Axis[i].setData( this.data );
				this.x_direction_Axis[i].draw();
			}
		},
		
		'drawAxis_y' : function() {
		
			var len = this.y_direction_Axis.length;
			
			for( var i=0 ; i<len ; i++ ) {
				this.y_direction_Axis[i].setData( this.data );
				this.y_direction_Axis[i].draw();
			}
		},
		
		'getPositionFromValue' : function( item ) {
			
			var dataGuid = this.data.axisGuide,
				x = 0,
				y = 0;
				
			x = this.x_direction_Axis[0].getCoorFromValue( item[ dataGuid['x'] ] );
			y = this.y_direction_Axis[0].getCoorFromValue( item[ dataGuid['y'] ] );
			return { 'x' : x , 'y' : y };
		},
		
		'destroyTopChart' : function() {
			
			this.$chartMainArea.empty().remove();
			this.$chartFaceArea.empty().remove();
			this.$chartFaceArea = null;
			this.$chartMainArea = null;
			this.data = null;
			this.backGroup = null;
			this.mainGroup = null;
			this.faceGroup = null;
			this.mainArea = null;
			
			for( var i=0 ; i<this.x_direction_Axis.length ; i++ ) {
				this.x_direction_Axis[i].destroy();
			}
			for( var j=0 ; j<this.y_direction_Axis.length ; j++ ) {
				this.y_direction_Axis[j].destroy();
			}
			this.x_direction_Axis =null;
			this.y_direction_Axis = null;
		},
		
		'getAxis_x' : function() {
			
			return this.x_direction_Axis;
		},
		
		'getAxis_y' : function() {
		
			return this.y_direction_Axis;
		},
		
		/**
		*This function is used for draw a arc.But you should provide some 
		*arguments as below:
		*	1. centerPos : the center point of the circle.
		*	2. r : the radius of the circle.
		*	3. a : the angle you want.
		*	4. some attributes for the path Dom.
		*It is worth to clear that this function shouldn't draw the full circle,
		*if you want draw a full circle , you should create a <g> and use this
		*attribute : "transform : rotate( angle , x , y)"
		*/
		'drawSectorCircle' : function( centerPos , r , a , attrs ) {
			
			var _a = 0.5*a,
				path = '';
				angleFlag = ( a>=Math.PI )? 1:0,
				x = centerPos.x,
				y = centerPos.y,
				oneEdgePointX = x + r,
				oneEdgePointY = y,
				otherEdgePointX = x + Math.cos(a)*r,
				otherEdgePointY = y - Math.sin(a)*r;
			
			path = 'M'+(x+','+y)+
					' L'+(oneEdgePointX+','+oneEdgePointY)+
					' A'+( r+','+r+','+0+','+angleFlag+','+0+','+otherEdgePointX+','+otherEdgePointY )+ 
					' Z';
					
			attrs = attrs==null ? {}:attrs;		
			attrs.d = path;
			return this.createElement( 'path' , attrs );
		},
		
		/**
		*If you want to draw a dotted line,
		*please use the attribute : "stroke-dasharray: x,x".
		*Example as below:
		*	var lineDom = xxx;
		*	lineDom.setAttribute( "stroke-dasharray" , 'x,x' );
		*/
		'drawLine' : function() {},
		'drawPolyline' : function() {},
		'destroy' : function() {},
		'reDraw' : function() {},
		'drawBar' : function() {},
		'drawCircle' : function() {},
		'drawMain' : function() {},
		'drawFace' : function() {},
		'drawBack' : function() {},
		'beforeDraw' : function() {},
		'afterDraw' : function() {},
		'overrideMethodsForAxis' : function( axis_x , axis_y ) {} 
	};
	
	Chart.prototype.constructor = Chart;
	return Chart;
});
define('serierschart',['chart'],function( Chart ) {

	var SeriersChart = function( chart_conf ) {
	
		Chart.call( this , chart_conf );
		this.polyLineDom = null;
		this.timeId = 0;
		this.cachPoints = null;
	};
	
	SeriersChart.prototype = new Chart();
	$.extend( SeriersChart.prototype , {
	
		'strokeWidth' : 1,
		
		'lineOpacity' : 0.2,
		
		'crossLineColor' : '#445566',
		
		'points' : [],
		
		'drawMain' : function() {
	
			this.drawLine();
			this.drawVerticalLine();
			this.drawLevelLine();
		},
		
		'prepareData' : function() {
			
			var datas = this.data.data,
				dataConf = null,
				points = [];
			
			datas.push();	
			for( var i=0 , len=datas.length ; i<len ; i++ ) {
				
				dataConf = this.getPositionFromValue( datas[i] );
				points.push( dataConf );
			}
			return points;
			
		},
		
		'drawVerticalLine' : function() {
			
			var axis_x = this.getAxis_x()[0],
				scaleInfo = axis_x._getScaleInfo(),
				mainAreaInfo = this.getChartMainInfo(),
				lineAttrs = {};
			
			for( var i=0 ; i<scaleInfo.length ; i++ ) {
				
				lineAttrs.x1 = scaleInfo[i].x;
				lineAttrs.y1 = 0;
				lineAttrs.x2 = scaleInfo[i].x;
				lineAttrs.y2 = mainAreaInfo.height;
				lineAttrs.stroke = this.crossLineColor;
				lineAttrs[ 'stroke-width' ] = 1;
				lineAttrs[ 'opacity' ] = this.lineOpacity;
				
				this.createElement( 'line' , lineAttrs , this.mainGroup );
			}
		},
		
		'drawLevelLine' : function() {
			
			var axis_y = this.getAxis_y()[0],
				scaleInfo = axis_y._getScaleInfo(),
				mainAreaInfo = this.getChartMainInfo(),
				lineAttrs = {};
			
			for( var i=0 ; i<scaleInfo.length ; i++ ) {
				
				lineAttrs.x1 = 0;
				lineAttrs.y1 = scaleInfo[i].y;
				lineAttrs.x2 = mainAreaInfo.width;
				lineAttrs.y2 = scaleInfo[i].y;
				lineAttrs.stroke = this.crossLineColor
				lineAttrs[ 'stroke-width' ] = 1;
				lineAttrs[ 'opacity' ] = this.lineOpacity;
				
				this.createElement( 'line' , lineAttrs , this.mainGroup );
			}
		},
		
		'drawLine' : function() {
			
			var points = this.prepareData(),polylinePoints='';
			
			this.cachPoints = points;	
			for( var i=0 ; i<points.length ; i++ ) {
				polylinePoints = polylinePoints + points[i].x + ','+ points[i].y + ' ';
			}
			
			this.polyLineDom = this.createElement( 'polyline' , {
				'points' : polylinePoints,
				'stroke' : "#ff0000",
				'stroke-width' : this.strokeWidth,
				'fill' : 'transparent'
			} , this.mainGroup );
		},

		'movePolyLine' : function() {

			var polylinePoints = '',points = this.cachPoints,points0 = points[0];

			for( var i=0 ; i<points.length-1 ; i++ ) {
				points[i].y = points[i+1].y;
			}
			points[ i ].y = points0.y;
			for( var i=0 ; i<points.length ; i++ ) {
				polylinePoints = polylinePoints + points[i].x + ','+ points[i].y + ' ';
			} 
	 		this.polyLineDom.setAttribute( 'points' , polylinePoints );
		},

		'anmationPolyLine' : function() {
			var self = this;
			if( this.timeId==0 ) {
				this.timeId = setInterval( function() {
					self.movePolyLine();
				} , 100 );	
			}
		},
		
		'stopAnmation' : function() {
			clearTimeout( this.timeId || 0 );
			this.timeId = 0;
		},

		'getPositionFromValue' : function( item ) {
			
			var dataGuid = this.data.axisGuide,
				axis_x = this.x_direction_Axis[0],
				x = 0,
				y = 0;

			x = axis_x.getCoorFromValue( item[ dataGuid['x'] ] );
			y = this.y_direction_Axis[0].getCoorFromValue( item[ dataGuid['y'] ] );
			return { 'x' : x , 'y' : y };
		}
		
	});
	
	SeriersChart.prototype.constructor = SeriersChart;
	return SeriersChart;	
});
define('axis',['jquery'],function( $ ){
	/**
	*Axis Class is a super Class , any actual Class about axis 
	* are all should extend it. 
	*/
	var Axis = function( container , axisConf ) {
		this.$container = null;
		if( container ) {
			this.$container = $( container );
		}
		if( axisConf ) {
			this.axisWidth = axisConf.axisWidth==null? 5 : axisConf.axisWidth;
			this.requireScaleNum = axisConf.requireScaleNum || 5;
		}
		this.mapping = null;
		this.data = null;
		this.minValue = 0;
		this.maxValue = 0;
		this.axisContainer = null;
		this.svgConatiner = null;
		this.lineGroup = null;
		this.scaleGroup = null;
		this.axisLineInfo = null;
		this.scaleInfo = null;
		this.scaleDirection = null;
		this.init();
	};
	
	Axis.prototype = {
		
		/**
		* Data format as below:
		*	{
		*		'axisGuide' : {
		*			'x' : 'aaa',
		*			'y' : 'bbb'
		*		},
		*		'data' : [
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			},
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			},
		*			{
		*				'aaa' : xxx,
		*				'bbb' : xxx
		*			}
		*		]
		*	}
		*
		*
		*
		*/
		'setData' : function( data ) {
			
			this.data = this.processData( data );
		},
		
		'processData': function( data ) {
		
			this.setMaxAndMin( data );
			return data;
		},
		
		'setMaxAndMin' :  function( data ) {
			var mark = data.axisGuide[ this.getAxisType() ],
				axisData = data.data,
				min = 0,
				max = 0,
				item = null;
			
			if( axisData.length===0 ) return data;
			min = axisData[0][ mark ];
			max = axisData[0][ mark ];
			for( var len=axisData.length,i=0 ; i<len ; i++ ) {
			
				item = axisData[i];
				if( min>item[ mark ] ) {
					min = item[ mark ];
				}
				if( max<item[ mark ] ) {
					max = item[ mark ];
				}
			}
			if( min === max ) {
				min = min - 0.5;
				max = max + 0.5;
			}
			this.minValue = min;
			this.maxValue = max;
			return {
				'minValue' : min,
				'maxValue' : max
			};
		},
		
		'draw' : function( scaleNum ) {
			
			var requireScaleNum = scaleNum || this.requireScaleNum;
			
			this._render();
			////////do some thing before drawing axis/////////
			this.beforeDrawAxis();
			//////////////////////////////////////////////////
			this._drawAxisLine();
			this._drawScaleLine( requireScaleNum );
			this._drawScaleValue();
			////////do some thing after drawing axis//////////
			this.afterDrawAxis();
			//////////////////////////////////////////////////
		},
		
		'getAxisDom' : function() {
			
			return this.svgConatiner;
		},
		
		'getAxisContainer' : function() {
			
			return this.axisContainer;
		},
		
		//Some constant as below///////////////////////////
		'XMLNS' : 'http://www.w3.org/2000/svg',
		'SVG_NS' : "http://www.w3.org/2000/svg",
		///////////////////////////////////////////////////
		
		'init' : function() {},
		
		
		/**
		*Here is the axis html template as below:
		*	<div class="AxisContainer_x">
		*		<div class="svgContainer">
		*			<svg>
		*				<group class="lineGroup"></group>
		*				<group class="scaleGroup"></group>
		*			</svg>
		*		</div>
		*		<span class="mark_x" id="mark1"></span>
		*		<span class="mark_x" id="mark2"></span>
		*		<span class="mark_x" id="mark3"></span>
		*	</div>
		*
		*/
		'_render' : function() {
		
			var axisContainer = $('<div></div>').get(0),
				svgConatiner = $('<div></div>').get(0),
				svgCon = this._createSVGContainer(),
				lineGroup = this._createGroup(),
				scaleGroup = this._createGroup();
				
			this.axisContainer = axisContainer;
			this.svgConatiner = svgConatiner;
			this.lineGroup = lineGroup;
			this.scaleGroup = scaleGroup;
				
		    svgCon.appendChild( lineGroup );
			svgCon.appendChild( scaleGroup );
			svgConatiner.appendChild( svgCon );
			axisContainer.appendChild( svgConatiner );
			//////////add some class tag////////////////////////////
			svgConatiner.setAttribute( 'class' , 'svgContainer' );
			lineGroup.setAttribute( 'class' , 'lineGroup' );
			scaleGroup.setAttribute( 'class' , 'scaleGroup' );
			////////////////////////////////////////////////////////
			this._setAxisPosition();
			return this;
		},
		
		'_getNiceMinValue' : function( minValue ) {
			
			return Math.floor( minValue );
		},
		
		'_getNiceMaxValue' : function( maxValue ) {
			
			return Math.ceil( maxValue );
		},
		
		'_getScaleInfo' : function( scaleCount ) {
			
			if( this.scaleInfo===null ) {
				var niceMaxValue = this._getNiceMaxValue( this.maxValue ),
					niceMinValue = this._getNiceMinValue( this.minValue ),
					niceDis = niceMaxValue - niceMinValue,
					increaseCount = scaleCount,
					decreaseCount = scaleCount,
					increaseStep = 0,
					scaleInfo = [],
					isIncrease = true;
				
				while( niceDis % scaleCount !== 0 ) {
					if( isIncrease ) {
						scaleCount = (++increaseCount);
						isIncrease = false;
					}else{
						scaleCount = (--decreaseCount);
						isIncrease = true;
					}
				}
				increaseStep = (niceMaxValue - niceMinValue)/scaleCount;
				for( var i=0 ; i<=scaleCount ; i++ ) {
					scaleInfo.push( { 'value' : niceMinValue + i*increaseStep , 'x':0 , 'y':0 } );
				}
				this.scaleInfo = scaleInfo;
			}
			return this.scaleInfo;
		},

		'_createSVGContainer' : function() {
		
			var svgTemplate = document.createElementNS( this.SVG_NS , 'svg' );
			
			svgTemplate.setAttribute( 'xmlns' , this.XMLNS );
			svgTemplate.setAttribute( 'version' , '1.1' );
			svgTemplate.setAttribute( 'overflow' , 'hidden' );
			svgTemplate.setAttribute( 'width' , '100%' );
			svgTemplate.setAttribute( 'height' , '100%' );
			return svgTemplate;
		},
		
		'_createGroup' : function() {
		
			return document.createElementNS( this.SVG_NS , 'g' );
		},
		
		'clearDynamicCache' : function() {
			
			this.mapping = null;
			this.minValue = 0;
			this.maxValue = 0;
			this.axisContainer = null;
			this.svgConatiner = null;
			this.lineGroup = null;
			this.scaleGroup = null;
			this.axisLineInfo = null;
			this.scaleInfo = null;
		},
		
		'_createScaleNode' : function( scaleNodeAttrs , scaleNodeCss , value ) {
			
			var scaleNode = $('<span></span>'),
				axisContainer = this.getAxisContainer();
			
			scaleNode.attr( scaleNodeAttrs );
			scaleNode.css( scaleNodeCss );
			scaleNode.text( value );
			axisContainer.appendChild( scaleNode[0] );
			return scaleNode;
		},
		
		'_drawScaleValue' : function() {},
		'_drawAxisLine' : function() {},
		'_drawScaleLine' : function() {},
		'_setAxisPosition' : function() {},
		'getScaleDoms' : function() {},
		'beforeDrawAxis' : function() {},
		'getAxisLineInfo' : function() {},
		'afterDrawAxis' : function() {},
		'scaleNodeNiceFix' : function() {},
		'getAxisType' : function() {},
		'getCoorFromValue' : function() {},
		'getValueFromCoor' : function() {},
		'destroy' : function() {},
		'reDraw' : function() {}
	};
	
	Axis.prototype.constructor = Axis;
	return Axis;
});
define('axis_x',['jquery', 'axis'],function( $ , Axis ) {
	/**
	*This is a actual axis on "x" direction;
	*Axis_x Class is extends from Axis Class;
	*The argument axisConf is like below:
	*		{
	*			container : xxx,
    *			leftDis : xxx,
	*			rightDis : xxx,
	*			bottomDis : xxx,
	*			axisWidth : xxx,
	*			leftScaleDis : xxx,
	*			rightScaleDis : xxx,
	*			scaleDirection : xxx,
	*			requireScaleNum : xxx
	*		}
	*/
	
	var Axis_x = function( container , axisConf ) {
	
		Axis.call(this,container,axisConf);
		if( axisConf ) {
		
			this.bottomDis = axisConf.bottomDis==null? 0 : axisConf.bottomDis;
			this.leftDis = axisConf.leftDis==null? 10 : axisConf.leftDis;
			this.rightDis = axisConf.rightDis || 10;
			this.leftScaleDis = axisConf.leftScaleDis || 0;
			this.rightScaleDis = axisConf.rightScaleDis || 0;
			this.scaleDirection = axisConf.scaleDirection || 'up';
		}
	};
	
	Axis_x.prototype = new Axis();
	
	$.extend( Axis_x.prototype , {
		
		'AXISCLASS' : 'axisContainer_x',
		
		'TYPE' : 'x',
		
		'constructor' : Axis_x ,
		
		'getRulerLength' : function() {
		
			var axisDom = this.getAxisDom();
			
			if( axisDom ) {
				return axisDom.offsetWidth - this.leftScaleDis - this.rightScaleDis;
			}
			return -1;
		},
		
		'getAxisMapping' : function() {

			var valueDis = this._getNiceMaxValue( this.maxValue ) - this._getNiceMinValue( this.minValue ),
				coorDis = this.getRulerLength(),
				coorPer = 0,
				valuePer = 0;
				
			if( this.mapping == null ) {
					
				coorPer = coorDis / valueDis;		
				valuePer = valueDis / coorDis;
				this.mapping = {
					'coorPer' : coorPer,
					'valuePer' : valuePer
				}
			}
			return this.mapping;
		},
 		
		/**
		*We must ensure that this axis begin at 0px;
		*The argument "coor" must be greater than 0 or less than 0;
		*/
		'getValueFromCoor' : function( coor ) {
			
			var valuePer = this.getAxisMapping().valuePer;
			
			return this._getNiceMinValue( this.minValue ) + valuePer*( coor - this.leftScaleDis );
		}, 
		
		'getCoorFromValue' : function( value ) {
			
			var valueDis = value - this._getNiceMinValue( this.minValue ),
				coorPer = this.getAxisMapping().coorPer;
			
			return this.leftScaleDis + coorPer*valueDis;	
		},
		
		'_setAxisPosition' : function() {
		
			var $axisContainer = $( this.getAxisContainer() ),
				$svgConatiner = $( this.svgConatiner ),
				outerWidth = 0,
				outerHeight = 0;
				
			outerWidth = this.$container.width();
			outerHeight = this.$container.height();
			
			$axisContainer.css({
				'position' : 'absolute',
				'left' : this.leftDis,
				'top' : outerHeight - this.bottomDis - this.axisWidth,
				'width' : outerWidth - this.leftDis-this.rightDis,
				'height' : this.axisWidth+this.bottomDis
			});
			$svgConatiner.css({
				'position' : 'relative',
				'overflow' : 'hidden',
				'height' : this.axisWidth
			});
			
			return this;
		},
		
		'beforeDrawAxis' : function() {
			
			var axisContainer = this.getAxisContainer();
			
			axisContainer.setAttribute( 'class' , this.AXISCLASS );
			this.$container.append( axisContainer );
		},
		
		'getAxisLineInfo' : function() {
		
			if( this.axisLineInfo==null ) {
				var outerWidth = this.$container.width(),
					outerHeight = this.$container.height(),
					begX = 0,
					begY = 0,
					endX = 0,
					endY = 0;
					
				begX = 0;
				begY = (this.scaleDirection==='up' ? this.axisWidth : 0);
				endX = this.getAxisDom().offsetWidth;
				endY = begY;
				this.axisLineInfo = {
								'begX' : begX,
								'begY' : begY,
								'endX' : endX,
								'endY' : endY
							};
			}
				
			return this.axisLineInfo;
		},
		
		'_drawAxisLine' : function() {
			
			var axisLine = document.createElementNS( this.SVG_NS , 'line' ),
				lineInfo = this.getAxisLineInfo();
				
			axisLine.setAttribute( 'x1' , lineInfo.begX );
			axisLine.setAttribute( 'y1' , lineInfo.begY );
			axisLine.setAttribute( 'x2' , lineInfo.endX );
			axisLine.setAttribute( 'y2' , lineInfo.endY );
			
			this.lineGroup.appendChild( axisLine );
			return axisLine;
		},
		
		'_drawScaleLine' : function( scaleCount ) {
		
			var scaleInfo = this._getScaleInfo( scaleCount ),
				endX = 0,
				endY = (this.scaleDirection==='up'? this.axisWidth : 0),
				begY = (this.scaleDirection==='up'? 0 : this.axisWidth ),
				begX = 0,
				path = '',
				pathDom = null;
			
			for( var i=0,len=scaleInfo.length ; i<len ; i++ ) {
				
				begX = this.getCoorFromValue( scaleInfo[i].value );
				endX = begX;
				path = path + 'M'+begX + ' ' + begY + ' L' + endX + ' ' + endY + ' ';
				scaleInfo[i].x = endX;
				scaleInfo[i].y = endY;
			}
			pathDom = document.createElementNS( this.SVG_NS , 'path' );
			pathDom.setAttribute( 'd' , path );
			this.scaleGroup.appendChild( pathDom );
			return pathDom;
		},
		
		'_drawScaleValue' : function() {
		
			var scaleInfo = this._getScaleInfo(),
				item = null,
				scaleNode = null,
				scaleNodeAttrs = {
					'class' : 'mark_x',
					'id' : null
				},
				scaleNodeCss = {
					'position' : 'absolute',
					'left':0,
					'top' : 0
				};
			
			for( var i=0,len=scaleInfo.length ; i<len ; i++ ) {
				
				item = scaleInfo[i];
				scaleNodeAttrs.id = 'mark_x_'+i;
				scaleNodeCss.left = item.x;
				scaleNodeCss.top = item.y;
				scaleNode = this._createScaleNode( scaleNodeAttrs , scaleNodeCss , this.displayValue( item ) );
				this.scaleNodeNiceFix( scaleNode , null );
			} 
		},
		
		'displayValue' : function( item ) {
			
			return item.value;
		},
		////////////////The user can override this method/////////////////////
		'scaleNodeNiceFix' : function( scaleNode , nodeAttrs ) {
		
			var nodeWidth = scaleNode.width(),
				x = scaleNode.css( 'left' ).replace( /px/ , '' ) - 0,
				scaleValueCss = {
					left : x-0.5*nodeWidth
				};
			
			if( this.scaleDirection==='down' ) {
				scaleValueCss.top = (-1)*scaleNode.height();
			}
			scaleNode.css( scaleValueCss );			
			return scaleNode;
		},
		//////////////////////////////////////////////////////////////////////
		'destroy' : function() {
			
			var topCon = this.getAxisContainer();
			
			$(topCon).empty().remove();
			this.bottomDis = null;
			this.leftDis = null;
			this.rightDis = null;
			this.leftScaleDis = null;
			this.rightScaleDis = null;
			this.data = null;
			this.$container = null;
			this.clearDynamicCache();
		},
		
		'reDraw' : function() {
			
			var topCon = $( this.getAxisContainer() );
			
			this.clearDynamicCache();
			topCon.empty();
			topCon.remove();
			this.draw();
		},
		
		'getAxisType' : function() {

			
			return this.TYPE;
		}
	} );
	//////////////////////////////////////////////////////////
	return Axis_x;
	/////////////////////////////////////////////////////////
});
define('axis_y',['jquery','axis'],function( $ , Axis ) {
	/**
	*This is a actual axis on "x" direction;
	*Axis_x Class is extends from Axis Class;
	*The argument axisConf is like below:
	*		{
	*			container : xxx,
    *			leftDis : xxx,
	*			topDis : xxx,
	*			bottomDis : xxx,
	*			axisWidth : xxx,
	*			topScaleDis : xxx,
	*			bottomScaleDis : xxx,
	*			scaleDirection : xxx,
	*			requireScaleNum : xxx
	*		}
	*/
	
	var Axis_y = function( container , axisConf ) {
	
		Axis.call(this,container,axisConf);
		this.bottomDis = axisConf.bottomDis;
		this.leftDis = axisConf.leftDis;
		this.topDis = axisConf.topDis;
		this.topScaleDis = axisConf.topScaleDis || 0;
		this.bottomScaleDis = axisConf.bottomScaleDis || 0;
		this.scaleDirection = axisConf.scaleDirection || 'right';
	};
	
	Axis_y.prototype = new Axis();
	
	$.extend( Axis_y.prototype , {
		
		'AXISCLASS' : 'axisContainer_y',
		
		'TYPE' : 'y',
		
		'constructor' : Axis_y ,
		
		'getRulerLength' : function() {
		
			var axisDom = this.getAxisDom();
			
			if( axisDom ) return axisDom.offsetHeight - this.topScaleDis - this.bottomScaleDis;
			return -1;
		},
		
		'getAxisMapping' : function() {

			var valueDis = this._getNiceMaxValue( this.maxValue ) - this._getNiceMinValue( this.minValue ),
				coorDis = this.getRulerLength(),
				coorPer = 0,
				valuePer = 0;
				
			if( this.mapping == null ) {
					
				coorPer = coorDis / valueDis;		
				valuePer = valueDis / coorDis;
				this.mapping = {
					'coorPer' : coorPer,
					'valuePer' : valuePer
				}
			}
			return this.mapping;
		},
 		
		/**
		*We must ensure that this axis begin at 0px;
		*The argument "coor" must be greater than 0 or less than 0;
		*/
		'getValueFromCoor' : function( coor ) {
			
			var valuePer = this.getAxisMapping().valuePer;
			
			return this._getNiceMinValue( this.minValue ) + valuePer*( coor - this.topScaleDis );
		}, 
		
		'getCoorFromValue' : function( value ) {
			
			var valueDis = value - this._getNiceMinValue( this.minValue ),
				coorPer = this.getAxisMapping().coorPer,
				coorTotalHeight = this.getAxisDom().offsetHeight;
				
			return coorTotalHeight - coorPer*valueDis - this.bottomScaleDis;	
		},
		
		'_setAxisPosition' : function() {
		
			var $axisContainer = $( this.getAxisContainer() ),
				$svgConatiner = $( this.svgConatiner ),
				outerHeight = this.$container.height();
			
			$axisContainer.css({
				'position' : 'absolute',
				'left' : 0,
				'top' : this.topDis,
				'width' : this.axisWidth+this.leftDis,
				'height' : outerHeight - this.topDis - this.bottomDis
			});
			$svgConatiner.css({
				'position' : 'relative',
				'overflow' : 'hidden',
				'left' : this.leftDis,
				'width' : this.axisWidth,
				'height' : '100%'
			});
			
			return this;
		},
		
		'beforeDrawAxis' : function() {
			
			var axisContainer = this.getAxisContainer();
			
			axisContainer.setAttribute( 'class' , this.AXISCLASS );
			this.$container.append( axisContainer );
		},
		
		'getAxisLineInfo' : function() {
		
			if( this.axisLineInfo==null ) {
				var outerWidth = this.$container.width(),
					outerHeight = this.$container.height(),
					begX = (this.scaleDirection==='right' ? 0 : this.axisWidth),
					endX = begX,
					endY = this.getAxisDom().offsetHeight,
					begY = 0;
			
				this.axisLineInfo = {
									'begX' : begX,
									'begY' : begY,
									'endX' : endX,
									'endY' : endY
						};
			}
				
			return this.axisLineInfo;
		},
		
		'_drawAxisLine' : function() {
			
			var axisLine = document.createElementNS( this.SVG_NS , 'line' ),
				lineInfo = this.getAxisLineInfo();
				
			axisLine.setAttribute( 'x1' , lineInfo.begX );
			axisLine.setAttribute( 'y1' , lineInfo.begY );
			axisLine.setAttribute( 'x2' , lineInfo.endX );
			axisLine.setAttribute( 'y2' , lineInfo.endY );
			
			this.lineGroup.appendChild( axisLine );
			return axisLine;
		},
		
		'_drawScaleLine' : function( scaleCount ) {
		
			var scaleInfo = this._getScaleInfo( scaleCount ),
				endY = 0;
				endX = (this.scaleDirection==='right' ? 0 : this.axisWidth),
				begY = 0,
				begX = (this.scaleDirection==='right' ? this.axisWidth : 0),
				path = '',
				pathDom = null;
			
			for( var i=0,len=scaleInfo.length ; i<len ; i++ ) {
			
				begY = this.getCoorFromValue( scaleInfo[i].value );
				endY = begY;
				path = path + 'M'+begX + ' ' + begY + ' L' + endX + ' ' + endY + ' ';
				scaleInfo[i].x = endX;
				scaleInfo[i].y = endY;
			}
			pathDom = document.createElementNS( this.SVG_NS , 'path' );
			pathDom.setAttribute( 'd' , path );
			this.scaleGroup.appendChild( pathDom );
			return pathDom;
		},
		
		'_drawScaleValue' : function() {
		
			var scaleInfo = this._getScaleInfo(),
				item = null,
				scaleNode = null,
				scaleNodeAttrs = {
					'class' : 'mark_y',
					'id' : null
				},
				scaleNodeCss = {
					'position' : 'absolute',
					'left':0,
					'top' : 0
				};
			
			for( var i=0,len=scaleInfo.length ; i<len ; i++ ) {
				
				item = scaleInfo[i];
				scaleNodeAttrs.id = 'mark_y_'+i;
				scaleNodeCss.left = item.x;
				scaleNodeCss.top = item.y;
				scaleNode = this._createScaleNode( scaleNodeAttrs , scaleNodeCss , this.displayValue( item ) );
				this.scaleNodeNiceFix( scaleNode , null );
			} 
		},
		
		'displayValue' : function( item ) {
		
			return item.value;
		},
		////////////////The user can override this method/////////////////////
		'scaleNodeNiceFix' : function( scaleNode , nodeAttrs ) {
		
			var nodeHeight = scaleNode.height(),
				y = scaleNode.css( 'top' ).replace( /px/ , '' ) - 0,
				width = scaleNode.css( 'width' ).replace( /px/ , '' ) - 0,
				scaleValueCss = {
					top : y-0.5*nodeHeight,
					left : this.leftDis - width
				}; 
				
			if( this.scaleDirection==='left' ) {
				scaleValueCss.left = this.leftDis+this.axisWidth;
			}
			scaleNode.css( scaleValueCss );
			return scaleNode;
		},
		/////////////////////////////////////////////////////////////////////////
		'destroy' : function() {
			
			var axisCom = $( this.getAxisContainer() );
			
			this.clearDynamicCache();
			this.bottomDis = null;
			this.leftDis = null;
			this.topDis = null;
			this.topScaleDis = null;
			this.bottomScaleDis = null;
			this.$container = null;
			this.data = null;
			axisCom.empty();
			axisCom.remove();
		},
 		
		'reDraw' : function() {
			
			var axisCom = $( this.getAxisContainer() );
			
			this.this.clearDynamicCache();
			axisCom.empty();
			axisCom.remove();
			this.draw();
		},
		
		'getAxisType' : function() {
			
			return this.TYPE;
		}
	
	} );
	//////////////////////////////////////////////////////////
	return Axis_y;
	/////////////////////////////////////////////////////////
});
